// Code generated by go generate; DO NOT EDIT.
package cmd

import (
	"fmt"
	"os"
	"strings"

	"github.com/dansimau/huecfg/pkg/hue"
	"github.com/iancoleman/strcase"
)

func resourcelinkToGenericSlice(s []hue.ResourceLink) []interface{} {
	var res = make([]interface{}, len(s))
	for i, obj := range s {
		res[i] = obj
	}
	return res
}

type resourcelinkListCmd struct {
	Fields string `long:"fields" description:"List of fields to include"`
	Sort   string `long:"sort" description:"Field to sort by"`
}

func (c *resourcelinkListCmd) Execute(args []string) error {
	bridge := cmd.getHue()

	resourcelink, err := bridge.GetResourceLinks()
	if err != nil {
		fmt.Fprintf(os.Stderr, "ERROR: %v\n", err)
		os.Exit(1)
	}

	fields := resourcelinkDefaultFields
	if c.Fields != "" {
		fields = []string{}
		for _, fieldName := range strings.Split(c.Fields, ",") {
			fields = append(fields, resourcelinkHeaderTransform.TransformInput(fieldName))
		}
	}

	sortField := resourcelinkDefaultSortField
	if c.Sort != "" {
		sortField = strcase.ToCamel(resourcelinkHeaderTransform.TransformInput(c.Sort))
	}

	sortedresourcelink, err := sortByField(resourcelinkToGenericSlice(resourcelink), sortField)
	if err != nil {
		return err
	}

	rows := [][]string{}

	headerRow := []string{}
	for _, fieldName := range fields {
		headerRow = append(headerRow, resourcelinkHeaderTransform.TransformOutput(fieldName))
	}
	rows = append(rows, headerRow)

	for _, light := range sortedresourcelink {
		row := []string{}

		for _, field := range fields {
			v, err := lookupField(light, field)
			if err != nil {
				return err
			}

			row = append(row, resourcelinkFieldTransform.TransformOutput(field, reflectValueToString(v)))
		}

		rows = append(rows, row)
	}

	printTable(rows)

	return nil
}
