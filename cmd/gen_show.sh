#!/usr/bin/env bash
#
# Generates Go source file for a show command.
#

set -eu

for arg in "$@"; do
	varname="$(echo "$arg" | cut -f1 -d '=')"
	varval="$(echo "$arg" | cut -f2 -d '=')"

	eval "$varname='$varval'"
done

#OBJ_NAME=rule
#GET_OBJ_FUNC="GetRule"


cat <<EOF>${OBJ_NAME}s_show_gen.go
// Code generated by go generate; DO NOT EDIT.
package cmd

import (
	"fmt"
	"os"

	"github.com/mikefarah/yq/v3/pkg/yqlib"
	"gopkg.in/yaml.v2"
)

type ${OBJ_NAME}sShowCmd struct {
	Arguments struct {
		ID string
	} \`positional-args:"true" required:"true" positional-arg-name:"${OBJ_NAME}-ID"\`
}

func (c *${OBJ_NAME}sShowCmd) Execute(args []string) error {
	bridge := cmd.getHue()

	resp, err := bridge.${GET_OBJ_FUNC}(c.Arguments.ID)
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
	}

	bytes, err := yaml.Marshal(resp)
	if err != nil {
		return err
	}

	return yqlib.ColorizeAndPrint(bytes, os.Stdout)
}
EOF
